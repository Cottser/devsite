#!/usr/bin/env bash

# Performs and delegates most of the main operations.
#
# main() sets things up and calls this function.
function devsite() {
  # Check if CONFIG_PATH is writable. If it isn't, try to change it.
  if [ ! -w "$CONFIG_PATH" ]; then
    local CONFIG_READONLY=1
    chmod u+w "$CONFIG_PATH"
  fi

  write_settings_files "$@"
  write_drushrc "$@"
  write_db_settings "$@"
  create_db "$@"
}

# Write settings.local.php.
function write_settings_files() {
  if [ ! -e "$CONFIG_PATH/settings.php" ]; then
    echo -n "Writing settings.php file... "
    cp -f ~/Sites/default_files/drupal$DRUPAL_VERSION/settings.php $CONFIG_PATH
    echo "done"
  elif ! grep -q "settings.local.php" "$CONFIG_PATH/settings.php"; then
    echo -n "Appending settings.local.php include to settings.php file... "
    echo >> "$CONFIG_PATH/settings.php"
    cat ~/Sites/default_files/drupal$DRUPAL_VERSION/settings-local-include.php >> "$CONFIG_PATH/settings.php"
    echo "done"
  fi

  # Confirm overwrite of existing settings.local.php file.
  CONFIRM='y'
  if [ -e "$CONFIG_PATH/settings.local.php" ]; then
    yesno "Overwrite existing settings.local.php file?"
  fi
  if [ "$CONFIRM" == 'y' ]; then
    echo -n "Writing settings.local.php file... "
    cp -f ~/Sites/default_files/drupal$DRUPAL_VERSION/settings.local.php $CONFIG_PATH
    echo "done"
  fi
}

# Write a very basic drushrc.php so that things like `drush uli` just work.
function write_drushrc() {
  if [ ! -e "$CONFIG_PATH/drushrc.php" ]; then
    echo -n "Writing drushrc.php file... "
    cat << __EOF > "$CONFIG_PATH/drushrc.php"
<?php

\$options['l'] = "http://$1";
__EOF
    echo "done"
  fi
}

# Write the database connection details to settings.local.php.
function write_db_settings() {
  echo -n "Writing database details to settings.local.php... "
  local TEMP_FILE="/tmp/devsite_$DB_NAME.tmp"

  sed "s/'database' => '_dev'/'database' => '$DB_NAME'/" < "$CONFIG_PATH/settings.local.php" > $TEMP_FILE

  # Change root/root to prefer socket connection.
  sed "s/'username' => 'root'/'username' => '$(whoami)'/" < $TEMP_FILE > $TEMP_FILE.2
  sed "s/'password' => 'root'/'password' => ''/" < $TEMP_FILE.2 > $TEMP_FILE.3

  cp -f $TEMP_FILE.3 "$CONFIG_PATH/settings.local.php"
  rm $TEMP_FILE $TEMP_FILE.2 $TEMP_FILE.3
  echo "done"
}

# Create the database if it doesn't yet exist.
function create_db() {
  echo -n "Creating database $DB_NAME if it doesn't exist yet... "
  # Remove the database details from the SQL connection details.
  local SQL_CONNECTION="$(echo $(drush sql-connect) | sed -E "s/--database=[^ ]+ //")"

  # @todo Could add error handling here.

  # Create the database if it doesn't exist.
  $($SQL_CONNECTION --execute="CREATE DATABASE IF NOT EXISTS $DB_NAME")
  echo "done"
}

# Utility function to create a yes/no prompt.
#
# Code inspired by http://ubuntuforums.org/showthread.php?t=436799
#
# Usage:
#   yesno "Would you like to do something?"
#   [ "$CONFIRM" == 'y' ] && echo 'They said yes'
function yesno() {
  while true
  do
    echo -n "$1 (y or n): "
    read CONFIRM
    case $CONFIRM in
      y|Y|yes|Yes|YES) CONFIRM='y'; break ;;
      n|N|no|No|NO) CONFIRM='n'; break ;;
      *) echo Please enter only y or n.
    esac
  done
}

# Main function.
#
# Checks number of arguments and provides help text.
#
# Performs other checks and creates some basic variables then calls devsite()
# to start making things happen.
main() {
  if [ "$#" -ne 1 ]; then
    echo "Quickly set up a local copy of a Drupal site."
    echo
    echo "Usage: devsite example.localhost"
    echo
    echo "Run from anywhere within a Drupal site and specify the VirtualHost."
    echo
    echo "The VirtualHost is used to generate the database name as well, in the"
    echo "example above the database would be example_localhost."
    return;
  fi;

  local DRUPAL_VERSION="$(drush php-eval 'echo drush_drupal_major_version();')"
  if [ ! $DRUPAL_VERSION ]; then
    echo "No Drupal installation found."
    return 1
  fi

  # Currently Drupal 7 through 8 are supported.
  if [ $DRUPAL_VERSION -lt 7 -o $DRUPAL_VERSION -gt 8 ]; then
    echo "Drupal $DRUPAL_VERSION is not supported."
    return 1
  fi

  local DRUPAL_ROOT="$(drush php-eval 'echo DRUPAL_ROOT')"
  case $DRUPAL_VERSION in
    8) local CONFIG_PATH="$(drush php-eval 'echo DRUPAL_ROOT . "/" . Drupal\Core\DrupalKernel::findSitePath(Symfony\Component\HttpFoundation\Request::createFromGlobals());')"
      ;;
    7) local CONFIG_PATH="$(drush php-eval 'echo DRUPAL_ROOT . "/" . conf_path();')"
      ;;
  esac

  # Generate a database name. Force lowercase and replace any non-alphanumeric
  # characters with underscores.
  # @todo Check for valid first argument, for example it should not contain
  #   whitespace and needs to be able to be used as a VirtualHost.
  local DB_NAME="$(echo $1 | sed -e "s/[^a-zA-Z0-9]/_/g" | tr '[:upper:]' '[:lower:]')"

  devsite "$@"
}

main "$@"
